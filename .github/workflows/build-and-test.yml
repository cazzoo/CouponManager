name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test:coverage
        
      # Debug step - list coverage directory contents
      - name: List coverage directory
        run: |
          echo "Coverage directory contents:"
          ls -la ./coverage/

      - name: Generate Coverage Report
        uses: davelosert/vitest-coverage-report-action@v2.8.0
        with:
          json-summary-path: './coverage/coverage-summary.json'
          json-final-path: './coverage/coverage-final.json'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Extract coverage metrics for PR comment
      - name: Extract Coverage Metrics
        if: github.event_name == 'pull_request'
        id: coverage
        run: |
          STATEMENTS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json')).total.statements.pct)")
          LINES=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json')).total.lines.pct)")
          FUNCTIONS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json')).total.functions.pct)")
          BRANCHES=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage/coverage-summary.json')).total.branches.pct)")
          
          echo "STATEMENTS_COVERAGE=$STATEMENTS" >> $GITHUB_ENV
          echo "LINES_COVERAGE=$LINES" >> $GITHUB_ENV
          echo "FUNCTIONS_COVERAGE=$FUNCTIONS" >> $GITHUB_ENV
          echo "BRANCHES_COVERAGE=$BRANCHES" >> $GITHUB_ENV

      # Add coverage comment to PRs
      - name: Create Coverage Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: coverage
          message: |
            ## Coverage Report
            
            | Metric | Coverage |
            | ------ | -------- |
            | Statements | ${{ env.STATEMENTS_COVERAGE }}% |
            | Lines | ${{ env.LINES_COVERAGE }}% |
            | Functions | ${{ env.FUNCTIONS_COVERAGE }}% |
            | Branches | ${{ env.BRANCHES_COVERAGE }}% |
            
            Full report will be available after merge at:
            ${{ github.event.repository.html_url }}/pages/
          
      # Configure Pages for deployment
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      # Upload HTML coverage report as artifact
      - name: Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './coverage'
          exclude: |
            '**/.git/**'
            '**/xnotes/**'
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Preview Coverage Badge
        uses: wjervis7/vitest-badge-action@v1.0.0
        if: github.event_name == 'pull_request' && (success() || failure())
        with:
          result-type: statements
          vitest-config-path: './vitest.config.js'
          summary-path: './coverage/coverage-summary.json'
          badge-text: 'Coverage'
          badge-path: './badges/coverage/preview-badge.svg'
          upload-badge: false 